<?xml version="1.0" ?>
<launch>
      <env name="ROSCONSOLE_CONFIG_FILE" value="$(find vrx_gazebo)/config/custom_rosconsole.conf" />
      <!-- Gazebo world to load -->
      <arg name="world" default="$(find vrx_gazebo)/worlds/sandisland.world" />
      <!-- If true, run gazebo GUI -->
      <arg name="gui" default="true" />
      <!-- If true, run gazebo in verbose mode -->
      <arg name="verbose" default="false" />
      <!-- If true, start in paused state -->
      <arg name="paused" default="false" />
      <!-- Set various other gazebo arguments-->
      <arg name="extra_gazebo_args" default="" />
      <!-- Start in a default namespace -->
      <arg name="robot_name_1" default="boat1" />
      <arg name="robot_name_2" default="boat2" />
      <arg name="robot_name_3" default="boat3" />
      <arg name="robot_name_4" default="boat4" />

      <!-- Initial USV location and attitude-->
      <arg name="x" default="0" />
      <arg name="y" default="0" />
      <arg name="z" default="0.1" />
      <arg name="P" default="0" />
      <arg name="R" default="0" />
      <arg name="Y" default="-2.76" />

      <!-- If true, show non-competition ROS topics (/gazebo/model_states, /vrx/debug/wind/direction, etc.)-->
      <arg name="non_competition_mode" default="true" />
      <arg name="enable_ros_network" value="$(arg non_competition_mode)" />
      <env name="VRX_DEBUG" value="$(arg non_competition_mode)" />
      <env unless="$(arg non_competition_mode)" name="GAZEBO_MODEL_PATH" value="$(find vrx_gazebo)/models:$(find wamv_gazebo)/models:$(find wamv_description)/models:$(optenv GAZEBO_MODEL_PATH)" />

      <!-- Start Gazebo with the world file -->
      <include file="$(find gazebo_ros)/launch/empty_world.launch">
            <arg name="world_name" value="$(arg world)" />
            <arg name="verbose" value="$(arg verbose)" />
            <arg name="paused" value="$(arg paused)" />
            <arg name="use_sim_time" value="true" />
            <arg name="gui" value="$(arg gui)" />
            <arg name="enable_ros_network" value="$(arg enable_ros_network)" />
            <arg name="extra_gazebo_args" value="$(arg extra_gazebo_args)" />
      </include>


      <!-- robot description 1 -->
      <arg name="urdf" default="$(find duckiepond_vehicle)/urdf/duckieboat_new.xacro" />


      <param name="robot_description_1" command="$(find xacro)/xacro --inorder $(arg urdf) robot_name:=$(arg robot_name_1)" />
      <!-- Spawn model in Gazebo, script depending on non_competition_mode -->
      <node name="spawn_model_1" pkg="gazebo_ros" type="spawn_model" args="-x 7.5 -y 7.5 -z 0
      -R 0 -P 0 -Y -2.356
      -urdf -param robot_description_1 -model $(arg robot_name_1)" />


      <!-- robot description 2 -->
      <param name="robot_description_2" command="$(find xacro)/xacro --inorder $(arg urdf) robot_name:=$(arg robot_name_2)" />
      <!-- Spawn model in Gazebo, script depending on non_competition_mode -->
      <node name="spawn_model_2" pkg="gazebo_ros" type="spawn_model" args="-x -7.5 -y 7.5 -z 0
      -R 0 -P 0 -Y -0.785
      -urdf -param robot_description_2 -model $(arg robot_name_2)" />


      <!-- robot description 3 -->
      <param name="robot_description_3" command="$(find xacro)/xacro --inorder $(arg urdf) robot_name:=$(arg robot_name_3)" />
      <!-- Spawn model in Gazebo, script depending on non_competition_mode -->
      <node name="spawn_model_3" pkg="gazebo_ros" type="spawn_model" args="-x -7.5 -y -7.5 -z 0
      -R 0 -P 0 -Y 0.785
      -urdf -param robot_description_3 -model $(arg robot_name_3)" />


      <!-- robot description 4 -->
      <param name="robot_description_4" command="$(find xacro)/xacro --inorder $(arg urdf) robot_name:=$(arg robot_name_4)" />
      <!-- Spawn model in Gazebo, script depending on non_competition_mode -->
      <node name="spawn_model_4" pkg="gazebo_ros" type="spawn_model" args="-x 7.5 -y -7.5 -z 0
      -R 0 -P 0 -Y 2.356
      -urdf -param robot_description_4 -model $(arg robot_name_4)" />

      <node pkg="tf" type="static_transform_publisher" name="link1_broadcaster" args="0 0 0.3 0 0 0 1 boat1 boat1/velodyne_link 100" />
      <node pkg="tf" type="static_transform_publisher" name="link2_broadcaster" args="0 0 0.3 0 0 0 1 boat2 boat2/velodyne_link 100" />
      <node pkg="tf" type="static_transform_publisher" name="link3_broadcaster" args="0 0 0.3 0 0 0 1 boat3 boat3/velodyne_link 100" />
      <node pkg="tf" type="static_transform_publisher" name="link4_broadcaster" args="0 0 0.3 0 0 0 1 boat4 boat4/velodyne_link 100" />


</launch>